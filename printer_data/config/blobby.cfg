[servo BLOBBY_servo]
pin: PG12
maximum_servo_angle: 180
minimum_pulse_width: 0.00050
maximum_pulse_width: 0.00250

[gcode_macro BLOBBY]
variable_purge_loc_xy: 15,352                # location to start
variable_purge_loc_z: .2                     # starting z position

variable_part_cooling_fan:  .3               # Part Cooling fan speed.  -1 to leave it alone

variable_purge_length_minimum: 30            # min to purge
variable_purge_length_maximum: 150           # max per blob
variable_purge_length: 150                   # default amount to purge

variable_purge_spd: 400                 # Speed, in mm/min, of the purge.

variable_travel_spd_xy: 10000          # Travel speed xy
variable_travel_spd_z: 1000          # Travel speed z
variable_wipe_spd_xy: 10000          # Nozzle wipe speed in mm/min.

# Servo angles for tray positions
variable_tray_angle_out: 0
variable_tray_angle_in: 180

# Increase this value if the servo doesn't have enough time to fully retract or extend
variable_dwell_time: 200

# ========================================================================================
# ==================== BLOB TUNING =======================================================
# ========================================================================================

# The following section defines how the purging sequence is executed. This is where you 
# tune the purging to create pretty blobs. Refer to the visual reference for a better 
# understanding. The visual is populated with example values. Below are some guides 
# provided to help with tuning.
#
#                          \_____________/
#                             |___|___|
#                                \_/            ______________  < End of third iteration.
#                                / \                                  HEIGHT:   3 x iteration_z_raise - (2 + 1) x iteration_z_change  (3 x 5 - 2 x 1.2 = 11.4)
#                               |   |                                 EXTRUDED: 3 x max_iteration_length                              (3 x 50 = 150)
#                              /     \          ______________  < End of second iteration.
#                             |       \                               HEIGHT:   2 x iteration_z_raise - 1 x iteration_z_change        (2 x 5 - 1 x 1.2 = 8.8)
#                            /         |                              EXTRUDED: 2 x max_iteration_length                              (2 x 50 = 100)
#                           |           \       ______________  < End of first iteration. 
#                          /             \                            HEIGHT:   1 x iteration_z_raise                                 (1 x 5 = 5)
#                         |               |                           EXTRUDED: 1 x max_iteration_length                              (1 x 50 = 50)
#___________               \             /      ______________  < Start height of the nozzle. default value: 1.5mm
#           |_______________\___________/_      ______________  < Bottom of the tray
#           |_____________________________|
#           |
# 
########################### BLOB TUNING ##############################
# +-------------------------------------+----------------------------+
# |  Filament sticks to the nozzle at   | Incr. purge start          |
# |    initial purge (first few mm)     |                            |
# +-------------------------------------+----------------------------+
# |  Filament scoots out from under     | Incr. temperature          |
# |  the nozzle at the first iteration  | Decr. z_raise              |
# |                                     | Incr. purge_length_maximum |
# +-------------------------------------+----------------------------+
# |  Filament scoots out from under the | Decr. purge_spd            |
# |  the nozzle at later iterations     | Decr. z_raise_exp          |
# |                                     | Decr. z_raise              |
# |                                     | Incr. purge_length_maximum |
# +-------------------------------------+----------------------------+
# |  Filament sticks to the nozzle at   | Incr. z_raise_exp          |
# |         later iterations            |     (Not above 1)          |
# +-------------------------------------+----------------------------+
#

# The amount to raise Z
variable_z_raise: 12

# As the nozzle gets higher and the blob wider, the Z raise needs to be reduced, this
# follows the following formula: 
#            (extruded_amount/max_purge_length)^z_raise_exp * z_raise
# 1 is linear, below 1 will cause z to raise less quickly over time, above 1 will make it
# raise quicker over time. 0.85 is a good starting point and you should not have it above 1
variable_z_raise_exp: 0.85


variable_eject_hop: 5.0                                # Lift the nozzle slightly after creating the blob te release pressure on the tray.

# Dwell time (ms) after purging and before cleaning to relieve pressure from the nozzle.
variable_pressure_release_time: 1000


gcode:

  # ======================================================================================
  # ==================== RECORD STATE (INCL. FANS, SPEEDS, ETC...) =======================
  # ======================================================================================

  # General state
  SAVE_GCODE_STATE NAME=BLOBBY_state

  
  # ======================================================================================
  # ==================== CHECK HOMING STATUS =============================================
  # ======================================================================================
  
  {% if "xyz" not in printer.toolhead.homed_axes %}
    RESPOND MSG="BLOBBY: Not homed! Home xyz before blobbing"
  {% elif printer.quad_gantry_level and printer.quad_gantry_level.applied == False %}
    RESPOND MSG="BLOBBY: QGL not applied! run quad_gantry_level before blobbing"
  {% else %}
     # Part cooling fan
     {% if part_cooling_fan >= 0 %}
        {% set backup_fan_speed = printer.fan.speed  %}
        M106 S{part_cooling_fan * 255}
     {% endif %}

     # Set feedrate to 100% for correct speed purging
     {% set backup_feedrate = printer.gcode_move.speed_factor %}
     M220 S100

     # ======================================================================================
     # ==================== DEFINE BASIC VARIABLES ==========================================
     # ======================================================================================
    

     {% set filament_diameter = printer.configfile.config.extruder.filament_diameter|float %}
     {% set filament_cross_section = (filament_diameter/2) ** 2 * 3.1415 %}
     {% set pos = printer.gcode_move.gcode_position %}

     # ======================================================================================
     # ==================== DETERMINE PURGE LENGTH ==========================================
     # ======================================================================================

     {% if params.PURGE_LENGTH %}
        {% set purge_len = params.PURGE_LENGTH|float %}
     {% else %}
        {% set purge_len = purge_length %}
     {% endif %}
  

     {action_respond_info("BLOBBY:Purging %dmm of filament." % purge_len )}

     # Set to absolute positioning.
     G90

     # Check for purge length and purge if necessary.
     {% if purge_len|float > 0 %}
        {% set purge_x, purge_y = purge_loc_xy|map('float')%}
        {% set purge_z = purge_loc_z %}
        G1 X{purge_x} Y{purge_y} F{travel_spd_xy}

        # Calculate total number of iterations based on the purge length and the max_iteration 
        # length.
        {% set blobs = (purge_len / purge_length_maximum)|round(0, 'ceil')|int %}
        {% set purge_per_blob = purge_len|float / blobs %}
        {% set retracts_per_blob = (purge_per_blob / 40)|round(0, 'ceil')|int %}
        {% set purge_per_retract = (purge_per_blob / retracts_per_blob)|int %}
        {% set pulses_per_retract = (purge_per_blob / retracts_per_blob / 5)|round(0, 'ceil')|int %}
        {% set pulses_per_blob = (purge_per_blob / 5)|round(0, 'ceil')|int %}
        {% set purge_per_pulse = purge_per_blob / pulses_per_blob %}
        {% set pulse_time_constant = purge_per_pulse * 0.95 / purge_spd / (purge_per_pulse * 0.95 / purge_spd + purge_per_pulse * 0.05 / 50) %}
        {% set pulse_duration = purge_per_pulse / purge_spd %}
        {% set purge_start = purge_loc_z %}

        # Repeat the process until purge_len is reached
        {% for blob in range(blobs) %}
           RESPOND MSG={"'BLOBIFIER: Blob %d of %d (%.1fmm)'" % (blob + 1, blobs, purge_per_blob)}

           G1 Z{purge_start} F{travel_spd_z}

           G91 
           M83

           # Purge filament in a pulsating motion to purge the filament quicker and better
           {% for pulse in range(pulses_per_blob) %}
              # Calculations to determine z-speed
              {% set purged_this_blob = pulse * purge_per_pulse %}
              {% set z_last_pos = purge_start + ((purged_this_blob)/purge_length_maximum)**z_raise_exp * z_raise %}
              {% set z_pos = purge_start + ((purged_this_blob + purge_per_pulse)/purge_length_maximum)**z_raise_exp * z_raise %}
              {% set z_up = z_pos - z_last_pos %}
              {% set speed = z_up / pulse_duration %}

              # Purge quickly
              G1 Z{z_up * pulse_time_constant} E{purge_per_pulse * 0.95} F{speed}
              # Purge a tiny bit slowly
              G1 Z{z_up * (1 - pulse_time_constant)} E{purge_per_pulse * 0.05} F{speed}

              # retract and unretract filament every now and then for thorough cleaning
              {% if pulse % pulses_per_retract == 0 and pulse > 0 %}
                 G1 E-2 F1800
                 G1 E2 F800
              {% endif %}
           {% endfor %}

           # this blob is done, 
           G1 Z{eject_hop} F{travel_spd_z}
           G4 P{pressure_release_time}

           

           # remove it here
        {% endfor %}
     {% endif %}

     # Brush here
     G90 # absolute positioning
     {% if part_cooling_fan >= 0 %}
        M106 S{(backup_fan_speed * 255)|int}
     {% endif %}
    
     M220 S{(backup_feedrate * 100)|int}
  {% endif %}

  
  RESTORE_GCODE_STATE NAME=BLOBBY_state 


[gcode_macro BLOBBY_SERVO]
gcode:
   {% set dir = params.dir %}

   {% if dir == 'in'%}
      SET_SERVO SERVO=blobby_servo ANGLE=180
   {% elif dir == "out" %}
         SET_SERVO SERVO=blobby_servo ANGLE=0
   {% else %}
   {% endif %}
