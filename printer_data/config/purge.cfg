[servo purge_servo]
pin: PG12
maximum_servo_angle: 180
minimum_pulse_width: 0.00050
maximum_pulse_width: 0.00250

[gcode_macro _purge_config]
gcode:

#parking and positions
variable_park_pos: 16 , 329
variable_park_minz: 20
variable_park_zhop: 1
variable_park_travelxy: 10000
variable_park_travelz: 500

#brushing
variable_brush_start_pos: 16 , 339
variable_brush_end_pos: 49 , 339
variable_brush_travelxy: 15000
variable_brush_in: 0
variable_brush_out: 83
variable_brush_passes: 6

#purging
variable_purge_len: 200
variable_purge_pos: 16 , 329
variable_purge_travelxy: 100
variable_purge_fan: 50


#stuff
variable_servo_state: -1


[gcode_macro _purge_park]
gcode:
    {% set cfg = printer['gcode_macro _purge_config'] %}

    {% set z_hop = params.ZHOP|default(cfg.park_zhop)|float %}
    {% set axis = params.AXIS|default("xyz")|string %}
    {% set z_move = params.ZMOVE|default(1)|int %}
	
    {% set cur_z = printer.toolhead.position.z|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
	
    {% set park_x = cfg.park_pos[0] %}
    {% set park_y = cfg.park_pos[1] %}
	
    {% if "xyz" not in printer.toolhead.homed_axes %}
        { action_raise_error("Not homed") }
    {% else %}
        #{action_respond_info( "purge_park-1 cur_z %f Zhop %f Maxz %f" % ( cur_z , z_hop , max_z ) )}
        {% if cur_z + z_hop < max_z %}
           {% set new_z = cur_z + z_hop %}
        {% else %}
           {% set new_z = max_z %}
        {% endif %}

      
        #{action_respond_info( "purge_park-2 new_z %f   park_minz = %f  z_move %f " % ( new_z , cfg.park_minz , z_move  ))}

        SAVE_GCODE_STATE NAME=_PURGE_PARK

        g90
        {% if "z" in axis %}
            {% if z_move > 0 %}
                g1 z{new_z} F{cfg.park_travelz}
            {% endif %}
        {% endif %}

        {% if "xy" in axis %}
            g0 x{park_x} y{park_y} F{cfg.park_travelxy}
        {% endif %}

        {% if new_z < cfg.park_minz %}
           {% set new_z = cfg.park_minz %}
        {% endif %}
        
        {% if "z" in axis %}
            {% if z_move > 0 %}
                g1 z{new_z} F{cfg.park_travelz}
            {% endif %}
        {% endif %}

        RESTORE_GCODE_STATE NAME=_PURGE_PARK
    {% endif %}

[gcode_macro _purge_arm]
gcode:
    {% set cfg = printer['gcode_macro _purge_config'] %}
    {% set dir = params.ANGLE|default(5)|float %}
    {% set cur_z = printer.toolhead.position.z|float %}
    {% set ignorez = params.IGNOREZ|default(0)|int %}

    {% if cur_z + 1 < cfg.park_minz   and ignorez == 0 %}
        { action_raise_error( "too low to move arm. cur_z = %f and minz = %f" % ( cur_z , cfg.park_minz )) }
    {% else %}
        SET_GCODE_VARIABLE MACRO=_purge_config VARIABLE=servo_state VALUE={dir}
        SET_SERVO SERVO=purge_servo ANGLE={dir}
    {% endif %}

[gcode_macro _purge_brush]
gcode:
    {% set cfg = printer['gcode_macro _purge_config'] %}
    {% set start_x = cfg.brush_start_pos[0] %}
    {% set start_y = cfg.brush_start_pos[1] %}
    {% set end_x = cfg.brush_end_pos[0] %}
    {% set end_y = cfg.brush_end_pos[1] %}
    {% set z_move = params.ZMOVE|default(1)|int %}

    _purge_park ZMOVE={z_move}
    
    {% if "xyz" not in printer.toolhead.homed_axes %}
        { action_raise_error("Not homed") }
    {% else %}
        SAVE_GCODE_STATE NAME=_PURGE_BRUSH

        _purge_arm ANGLE={cfg.brush_out}

        g90

        G0 F{cfg.brush_travelxy}
        G0 F{15000}
        
        {% for _ in range(0, cfg.brush_passes) %}
            G0 X{start_x} Y{start_y}
            G0 X{end_x}
        {% endfor %}

        _purge_arm ANGLE={cfg.brush_in}
      
        _purge_park ZMOVE=0
        
        RESTORE_GCODE_STATE NAME=_PURGE_BRUSH
    {% endif %}


[gcode_macro purge_action]
gcode:
    {% set cfg = printer['gcode_macro _purge_config'] %}

    {% set orig_x = printer.toolhead.position.x|float %}
    {% set orig_y = printer.toolhead.position.y|float %}
    {% set orig_z = printer.toolhead.position.z|float %}
    {% set orig_fan = printer.fan.speed|default(0)|float %}
    {% set backup_feedrate = printer.gcode_move.speed_factor %}
    {% set max_flow = 12 %}
    {% set purge_move_speed = (max_flow / 5.0) * 60 | float %}

    {% if "xyz" not in printer.toolhead.homed_axes %}
        { action_raise_error("Not homed") }
    {% else %}
        SAVE_GCODE_STATE NAME=PURGE_ACTION
        
        _purge_park
        _purge_arm angle={cfg.brush_out}

        G4 P1000
        g1 x{cfg.purge_pos[0]} y{cfg.purge_pos[1]} F{cfg.park_travelxy}
        
        #feed rate
        M220 S100
        M106 S0

        # make the servo let go
        MMU_SERVO POS=up

        # relative positioning
        G91
        M83


        #M106 S{(cfg.purge_fan * 2.55 )|int}

        # purge
        g1 e+50 f400
        g0 x+5 f15000


        g1 e+50 f400
        g0 x+5 f15000
        g0 e+50 f400
        g0 x+5 f15000

        G1 E-2 F40                    ; retract
        g0 x-1 F15000                 ; break string
        g0 x+5 f{cfg.park_travelxy}   ; break string

        M106 S255
        G4 P2000

        G90

        _purge_arm angle=105
        _purge_arm angle=85

        _purge_arm angle=105
        _purge_arm angle=85

        _purge_arm angle=105
        
        _purge_arm angle={cfg.brush_in}

        g0 x{cfg.purge_pos[0]} y{cfg.purge_pos[1]} F{cfg.park_travelxy}



        _purge_brush ZMOVE=0


        M220 S{(backup_feedrate * 100)|int}

        #restore part fan
        #{action_respond_info( "fan was %f" % ( orig_fan ) )}
        M106 S{(orig_fan * 100)|int}
        
        g0 x{orig_x} y{orig_y} F{cfg.park_travelxy}
        #g0 z{orig_z} F{cfg.park_travelz}

        RESTORE_GCODE_STATE NAME=PURGE_ACTION
    {% endif %}


